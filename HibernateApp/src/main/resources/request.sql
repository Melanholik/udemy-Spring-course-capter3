-- Person

DROP TABLE IF EXISTS Person CASCADE;

CREATE TABLE IF NOT EXISTS Person
(
    id   int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    age  INT CHECK ( age < 120 )
);

INSERT INTO Person(name, age)
VALUES ('Top', 35),
       ('Bob', 52),
       ('Kate', 14);

SELECT *
FROM Person;

-- Item

DROP TABLE IF EXISTS Item;

CREATE TABLE IF NOT EXISTS Item
(
    id        int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    person_id INT          REFERENCES Person (id) ON DELETE SET NULL,
    item_name VARCHAR(100) NOT NULL
);

INSERT INTO Item(person_id, item_name)
VALUES (1, 'Book'),
       (1, 'AirPods'),
       (2, 'Iphone'),
       (3, 'Kindle'),
       (3, 'TV'),
       (3, 'PlayStation');

SELECT *
FROM Item;

-- Passport

DROP TABLE IF EXISTS passport;

CREATE TABLE IF NOT EXISTS passport
(
    id              INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    person_id       INT UNIQUE REFERENCES Person (id) ON DELETE CASCADE,
    passport_number INT NOT NULL
);

SELECT *
FROM passport;

SELECT Person.id, name, age, item_name, passport_number
FROM Person
         LEFT JOIN Item I ON Person.id = I.person_id
         LEFT JOIN passport p ON Person.id = p.person_id
ORDER BY id;

--- Actor

DROP TABLE IF EXISTS Actor;

CREATE TABLE IF NOT EXISTS Actor
(
    id   INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(200) NOT NULL UNIQUE,
    age  INT CHECK ( age > 0 )
);

SELECT *
FROM Actor;

--- Movie
DROP TABLE IF EXISTS Movie;

CREATE TABLE IF NOT EXISTS Movie
(
    id                 INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name               VARCHAR(200) NOT NULL UNIQUE,
    year_of_production INT CHECK ( year_of_production > 1900 )
);

SELECT *
FROM Movie;
--- Actor_Movie

DROP TABLE IF EXISTS Actor_Movie;

CREATE TABLE IF NOT EXISTS Actor_Movie
(
    actor_id INT REFERENCES Actor (id),
    movie_id INT REFERENCES Movie (id),
    PRIMARY KEY (actor_id, movie_id)
);

SELECT *
FROM Actor_Movie;